This is gnu-crypto.info, produced by makeinfo version 4.5 from
gnu-crypto.texi.

This manual is for the GNU Crypto library, version 2.0.1.

   Copyright (C) 2003 The Free Software Foundation, Inc.


   Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts, and no Back Cover Texts. A
copy of the license is included in the section entitled "GNU Free
Documentation License".  

File: gnu-crypto.info,  Node: GNU General Public License,  Next: Acknowledgements,  Prev: Copying GNU Crypto,  Up: Top

GNU General Public License
**************************

                         Version 2, June 1991
     Copyright (C) 1989, 1991 Free Software Foundation, Inc.
     59 Temple Place - Suite 330, Boston, MA  02111-1307, USA
     
     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

Preamble
********

   The licenses for most software are designed to take away your
freedom to share and change it.  By contrast, the GNU General Public
License is intended to guarantee your freedom to share and change free
software--to make sure the software is free for all its users.  This
General Public License applies to most of the Free Software
Foundation's software and to any other program whose authors commit to
using it.  (Some other Free Software Foundation software is covered by
the GNU Library General Public License instead.)  You can apply it to
your programs, too.

   When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
this service if you wish), that you receive source code or can get it
if you want it, that you can change the software or use pieces of it in
new free programs; and that you know you can do these things.

   To protect your rights, we need to make restrictions that forbid
anyone to deny you these rights or to ask you to surrender the rights.
These restrictions translate to certain responsibilities for you if you
distribute copies of the software, or if you modify it.

   For example, if you distribute copies of such a program, whether
gratis or for a fee, you must give the recipients all the rights that
you have.  You must make sure that they, too, receive or can get the
source code.  And you must show them these terms so they know their
rights.

   We protect your rights with two steps: (1) copyright the software,
and (2) offer you this license which gives you legal permission to copy,
distribute and/or modify the software.

   Also, for each author's protection and ours, we want to make certain
that everyone understands that there is no warranty for this free
software.  If the software is modified by someone else and passed on, we
want its recipients to know that what they have is not the original, so
that any problems introduced by others will not reflect on the original
authors' reputations.

   Finally, any free program is threatened constantly by software
patents.  We wish to avoid the danger that redistributors of a free
program will individually obtain patent licenses, in effect making the
program proprietary.  To prevent this, we have made it clear that any
patent must be licensed for everyone's free use or not licensed at all.

   The precise terms and conditions for copying, distribution and
modification follow.

    TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
  0. This License applies to any program or other work which contains a
     notice placed by the copyright holder saying it may be distributed
     under the terms of this General Public License.  The "Program",
     below, refers to any such program or work, and a "work based on
     the Program" means either the Program or any derivative work under
     copyright law: that is to say, a work containing the Program or a
     portion of it, either verbatim or with modifications and/or
     translated into another language.  (Hereinafter, translation is
     included without limitation in the term "modification".)  Each
     licensee is addressed as "you".

     Activities other than copying, distribution and modification are
     not covered by this License; they are outside its scope.  The act
     of running the Program is not restricted, and the output from the
     Program is covered only if its contents constitute a work based on
     the Program (independent of having been made by running the
     Program).  Whether that is true depends on what the Program does.

  1. You may copy and distribute verbatim copies of the Program's
     source code as you receive it, in any medium, provided that you
     conspicuously and appropriately publish on each copy an appropriate
     copyright notice and disclaimer of warranty; keep intact all the
     notices that refer to this License and to the absence of any
     warranty; and give any other recipients of the Program a copy of
     this License along with the Program.

     You may charge a fee for the physical act of transferring a copy,
     and you may at your option offer warranty protection in exchange
     for a fee.

  2. You may modify your copy or copies of the Program or any portion
     of it, thus forming a work based on the Program, and copy and
     distribute such modifications or work under the terms of Section 1
     above, provided that you also meet all of these conditions:

       a. You must cause the modified files to carry prominent notices
          stating that you changed the files and the date of any change.

       b. You must cause any work that you distribute or publish, that
          in whole or in part contains or is derived from the Program
          or any part thereof, to be licensed as a whole at no charge
          to all third parties under the terms of this License.

       c. If the modified program normally reads commands interactively
          when run, you must cause it, when started running for such
          interactive use in the most ordinary way, to print or display
          an announcement including an appropriate copyright notice and
          a notice that there is no warranty (or else, saying that you
          provide a warranty) and that users may redistribute the
          program under these conditions, and telling the user how to
          view a copy of this License.  (Exception: if the Program
          itself is interactive but does not normally print such an
          announcement, your work based on the Program is not required
          to print an announcement.)

     These requirements apply to the modified work as a whole.  If
     identifiable sections of that work are not derived from the
     Program, and can be reasonably considered independent and separate
     works in themselves, then this License, and its terms, do not
     apply to those sections when you distribute them as separate
     works.  But when you distribute the same sections as part of a
     whole which is a work based on the Program, the distribution of
     the whole must be on the terms of this License, whose permissions
     for other licensees extend to the entire whole, and thus to each
     and every part regardless of who wrote it.

     Thus, it is not the intent of this section to claim rights or
     contest your rights to work written entirely by you; rather, the
     intent is to exercise the right to control the distribution of
     derivative or collective works based on the Program.

     In addition, mere aggregation of another work not based on the
     Program with the Program (or with a work based on the Program) on
     a volume of a storage or distribution medium does not bring the
     other work under the scope of this License.

  3. You may copy and distribute the Program (or a work based on it,
     under Section 2) in object code or executable form under the terms
     of Sections 1 and 2 above provided that you also do one of the
     following:

       a. Accompany it with the complete corresponding machine-readable
          source code, which must be distributed under the terms of
          Sections 1 and 2 above on a medium customarily used for
          software interchange; or,

       b. Accompany it with a written offer, valid for at least three
          years, to give any third party, for a charge no more than your
          cost of physically performing source distribution, a complete
          machine-readable copy of the corresponding source code, to be
          distributed under the terms of Sections 1 and 2 above on a
          medium customarily used for software interchange; or,

       c. Accompany it with the information you received as to the offer
          to distribute corresponding source code.  (This alternative is
          allowed only for noncommercial distribution and only if you
          received the program in object code or executable form with
          such an offer, in accord with Subsection b above.)

     The source code for a work means the preferred form of the work for
     making modifications to it.  For an executable work, complete
     source code means all the source code for all modules it contains,
     plus any associated interface definition files, plus the scripts
     used to control compilation and installation of the executable.
     However, as a special exception, the source code distributed need
     not include anything that is normally distributed (in either
     source or binary form) with the major components (compiler,
     kernel, and so on) of the operating system on which the executable
     runs, unless that component itself accompanies the executable.

     If distribution of executable or object code is made by offering
     access to copy from a designated place, then offering equivalent
     access to copy the source code from the same place counts as
     distribution of the source code, even though third parties are not
     compelled to copy the source along with the object code.

  4. You may not copy, modify, sublicense, or distribute the Program
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense or distribute the Program is
     void, and will automatically terminate your rights under this
     License.  However, parties who have received copies, or rights,
     from you under this License will not have their licenses
     terminated so long as such parties remain in full compliance.

  5. You are not required to accept this License, since you have not
     signed it.  However, nothing else grants you permission to modify
     or distribute the Program or its derivative works.  These actions
     are prohibited by law if you do not accept this License.
     Therefore, by modifying or distributing the Program (or any work
     based on the Program), you indicate your acceptance of this
     License to do so, and all its terms and conditions for copying,
     distributing or modifying the Program or works based on it.

  6. Each time you redistribute the Program (or any work based on the
     Program), the recipient automatically receives a license from the
     original licensor to copy, distribute or modify the Program
     subject to these terms and conditions.  You may not impose any
     further restrictions on the recipients' exercise of the rights
     granted herein.  You are not responsible for enforcing compliance
     by third parties to this License.

  7. If, as a consequence of a court judgment or allegation of patent
     infringement or for any other reason (not limited to patent
     issues), conditions are imposed on you (whether by court order,
     agreement or otherwise) that contradict the conditions of this
     License, they do not excuse you from the conditions of this
     License.  If you cannot distribute so as to satisfy simultaneously
     your obligations under this License and any other pertinent
     obligations, then as a consequence you may not distribute the
     Program at all.  For example, if a patent license would not permit
     royalty-free redistribution of the Program by all those who
     receive copies directly or indirectly through you, then the only
     way you could satisfy both it and this License would be to refrain
     entirely from distribution of the Program.

     If any portion of this section is held invalid or unenforceable
     under any particular circumstance, the balance of the section is
     intended to apply and the section as a whole is intended to apply
     in other circumstances.

     It is not the purpose of this section to induce you to infringe any
     patents or other property right claims or to contest validity of
     any such claims; this section has the sole purpose of protecting
     the integrity of the free software distribution system, which is
     implemented by public license practices.  Many people have made
     generous contributions to the wide range of software distributed
     through that system in reliance on consistent application of that
     system; it is up to the author/donor to decide if he or she is
     willing to distribute software through any other system and a
     licensee cannot impose that choice.

     This section is intended to make thoroughly clear what is believed
     to be a consequence of the rest of this License.

  8. If the distribution and/or use of the Program is restricted in
     certain countries either by patents or by copyrighted interfaces,
     the original copyright holder who places the Program under this
     License may add an explicit geographical distribution limitation
     excluding those countries, so that distribution is permitted only
     in or among countries not thus excluded.  In such case, this
     License incorporates the limitation as if written in the body of
     this License.

  9. The Free Software Foundation may publish revised and/or new
     versions of the General Public License from time to time.  Such
     new versions will be similar in spirit to the present version, but
     may differ in detail to address new problems or concerns.

     Each version is given a distinguishing version number.  If the
     Program specifies a version number of this License which applies
     to it and "any later version", you have the option of following
     the terms and conditions either of that version or of any later
     version published by the Free Software Foundation.  If the Program
     does not specify a version number of this License, you may choose
     any version ever published by the Free Software Foundation.

 10. If you wish to incorporate parts of the Program into other free
     programs whose distribution conditions are different, write to the
     author to ask for permission.  For software which is copyrighted
     by the Free Software Foundation, write to the Free Software
     Foundation; we sometimes make exceptions for this.  Our decision
     will be guided by the two goals of preserving the free status of
     all derivatives of our free software and of promoting the sharing
     and reuse of software generally.

                                NO WARRANTY

 11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO
     WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE
     LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
     HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT
     WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT
     NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
     FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO THE
     QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
     PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY
     SERVICING, REPAIR OR CORRECTION.

 12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
     WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY
     MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE
     LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL,
     INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR
     INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
     DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU
     OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY
     OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN
     ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

                      END OF TERMS AND CONDITIONS

Appendix: How to Apply These Terms to Your New Programs
*******************************************************

   If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these
terms.

   To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
convey the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.


     ONE LINE TO GIVE THE PROGRAM'S NAME AND A BRIEF IDEA OF WHAT IT DOES.
     Copyright (C) YYYY  NAME OF AUTHOR
     
     This program is free software; you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation; either version 2 of the License, or
     (at your option) any later version.
     
     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.
     
     You should have received a copy of the GNU General Public License
     along with this program; if not, write to the
     
        Free Software Foundation, Inc.
        59 Temple Place - Suite 330
        Boston, MA  02111-1307
        USA


   Also add information on how to contact you by electronic and paper
mail.

   If the program is interactive, make it output a short notice like
this when it starts in an interactive mode:


     Gnomovision version 69, Copyright (C) 19YY NAME OF AUTHOR
     Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type
     `show w'. This is free software, and you are welcome to redistribute
     it under certain conditions; type `show c' for details.


   The hypothetical commands `show w' and `show c' should show the
appropriate parts of the General Public License.  Of course, the
commands you use may be called something other than `show w' and `show
c'; they could even be mouse-clicks or menu items--whatever suits your
program.

   You should also get your employer (if you work as a programmer) or
your school, if any, to sign a "copyright disclaimer" for the program,
if necessary.  Here is a sample; alter the names:


     Yoyodyne, Inc., hereby disclaims all copyright interest in the program
     `Gnomovision' (which makes passes at compilers) written by James Hacker.
     
     SIGNATURE OF TY COON, 1 April 1989
     Ty Coon, President of Vice


   This General Public License does not permit incorporating your
program into proprietary programs.  If your program is a subroutine
library, you may consider it more useful to permit linking proprietary
applications with the library.  If this is what you want to do, use the
GNU Library General Public License instead of this License.


File: gnu-crypto.info,  Node: Acknowledgements,  Next: Figure Index,  Prev: GNU General Public License,  Up: Top

Acknowledgements
****************

   Many people contribute to the GNU Crypto project, and in many
different capacities. Any omission to this list is accidental. Feel
free to contact <raif@fl.net.au> if you have been left out.


     Barreto, Paulo S. L. M.      <paulo.barreto@terra.com.br>
     Ferrier, Nic                 <nferrier@tapsellferrier.co.uk>
     Kmett, Edward                <ekmett@cxss.com>
     Koch, Werner                 <wk@gnupg.org>
     Louchart-Fletcher, Olivier   <olivier@zipworld.com.au>
     Marshall, Casey              <mstatic@metastatic.org>
     Naffah, Raif S.              <raif@fl.net.au>
     Osvik, Dag Arne              <osvik@ii.uib.no>
     Selensminde, Gisle           <gselens@broadpark.no>
     Wielaard, Mark               <mark@klomp.org>
     Wu, Thomas J.                <tom@arcot.com>


File: gnu-crypto.info,  Node: Figure Index,  Next: Index,  Prev: Acknowledgements,  Up: Top

Figure Index
************

* Menu:

* Assembly class diagram:                Assemblies.
* Cascade class diagram:                 Cascades.
* Ciphers class diagram:                 The IBlockCipher Interface.
* Key agreement class diagram:           Protocols.
* Key agreement sequence diagram:        Protocols.
* Keypair generation class diagram:      Keypairs.
* Keypair generation sequence diagram:   Keypairs.
* Message Authentication Code (MAC) class diagram: The IMac Interface.
* Message Digest class diagram:          The IMessageDigest Interface.
* Modes class diagram:                   The IMode Interface.
* Padding class diagram:                 The IPad Interface.
* PRNG class diagram:                    Random Numbers.
* Signature class diagram:               The ISignature Interface.
* Signature sequence diagram:            Signature Example.
* Stages wired in different directions:  Stage.
* Stages wired in same direction:        Stage.


File: gnu-crypto.info,  Node: Index,  Next: References,  Prev: Figure Index,  Up: Top

Index
*****

* Menu:

* addPostTransformer function (Assembly): Assembly.
* addPreTransformer function (Assembly): Assembly.
* Adleman, Leonard <1>:                  Signatures.
* Adleman, Leonard:                      Keypairs and Key Agreements.
* Advanced Encryption Standard (AES):    Ciphers.
* Algorithm-Specific Attributes:         Keypairs.
* Anderson, Ross <1>:                    Message Digests.
* Anderson, Ross:                        Ciphers.
* Anubis cipher:                         Ciphers.
* append function (Cascade):             Cascade.
* Applied Cryptography:                  Introduction.
* Arcfour PRNG:                          Random Numbers.
* ARCFOUR_KEY_MATERIAL variable (ARCFour): ARCFour.
* Assembly:                              Assemblies.
* Barreto, Paulo <1>:                    Acknowledgements.
* Barreto, Paulo <2>:                    Message Digests.
* Barreto, Paulo:                        Ciphers.
* Bellare, Mihir:                        Signatures.
* Biham, Eli <1>:                        Message Digests.
* Biham, Eli:                            Ciphers.
* blockSize function (IMessageDigest):   The IMessageDigest Interface.
* blockSizes function (Cascade):         Cascade.
* blockSizes function (IBlockCipher):    The IBlockCipher Interface.
* blockSizes function (Stage):           Stage.
* Blowfish cipher:                       Ciphers.
* Bosselaers, Antoon:                    Message Digests.
* Cascade:                               Cascades.
* CBC, cipher block chaining mode:       Modes.
* CIPHER_BLOCK_SIZE variable (IBlockCipher): The IBlockCipher Interface.
* ciphers:                               Ciphers.
* Classpath:                             Introduction.
* clone function (IBlockCipher):         The IBlockCipher Interface.
* clone function (IMac):                 The IMac Interface.
* clone function (IMessageDigest):       The IMessageDigest Interface.
* clone function (ISignature):           The ISignature Interface.
* cryptography:                          Introduction.
* CTR, counter mode:                     Modes.
* currentBlockSize function (Cascade):   Cascade.
* currentBlockSize function (IBlockCipher): The IBlockCipher Interface.
* currentBlockSize function (Stage):     Stage.
* currentBlockSize function (Transformer): Transformer.
* Daemen, Joan:                          Ciphers.
* Data Encryption Standard:              Ciphers.
* decodeSignature function (ISignatureCodec): The ISignatureCodec Interface.
* decryptBlock function (IBlockCipher):  The IBlockCipher Interface.
* DECRYPTION variable (IMode):           The IMode Interface.
* defaultBlockSize function (IBlockCipher): The IBlockCipher Interface.
* defaultKeySize function (IBlockCipher): The IBlockCipher Interface.
* DES cipher:                            Ciphers.
* DH algorithm:                          Keypairs and Key Agreements.
* DH_PARAMETERS variable (GnuDHKeyPairGenerator): Algorithm-Specific Attributes.
* Diffie-Hellman algorithm:              Keypairs and Key Agreements.
* Diffie-Hellman, key agreement:         Protocols.
* digest function (IMac):                The IMac Interface.
* digest function (IMessageDigest):      The IMessageDigest Interface.
* Digital Signature Algorithm:           Keypairs and Key Agreements.
* Digital Signature Standard <1>:        Signatures.
* Digital Signature Standard:            Keypairs and Key Agreements.
* Digital Signature Standard (DSS) algorithm: Keypairs and Key Agreements.
* Direction:                             Cascades.
* DIRECTION variable (Assembly):         Assembly.
* DIRECTION variable (Cascade):          Cascade.
* DIRECTION variable (Stage):            Stage.
* DIRECTION variable (Transformer):      Transformer.
* Dobbertin, Hans:                       Message Digests.
* DSA:                                   Keypairs and Key Agreements.
* DSS signature:                         Signatures.
* DSS, algorithm:                        Keypairs and Key Agreements.
* DSS_PARAMETERS variable (DSSKeyPairGenerator): Algorithm-Specific Attributes.
* ECB, electronic codebook mode:         Modes.
* ElGamal, key agreement:                Protocols.
* encodeSignature function (ISignatureCodec): The ISignatureCodec Interface.
* encryptBlock function (IBlockCipher):  The IBlockCipher Interface.
* ENCRYPTION variable (IMode):           The IMode Interface.
* example, Assembly:                     Assembly Example.
* example, Cascade:                      Cascade Example.
* example, cipher:                       Cipher Example.
* example, Key Agreement:                Key Agreement Example.
* example, Keypair Generation:           Keypair Generation Example.
* example, message digest:               Message Digest Example.
* example, modes:                        Mode Example.
* example, padding:                      Padding Example.
* EXPONENT_SIZE variable (GnuDHKeyPairGenerator): Algorithm-Specific Attributes.
* FDL, GNU Free Documentation License:   GNU Free Documentation License.
* Ferguson, Neils:                       Ciphers.
* Ferrier, Nic:                          Acknowledgements.
* generate function (IKeyPairFactory):   The IKeyPairGenerator Interface.
* GENERATOR variable (SRPKeyPairGenerator): Algorithm-Specific Attributes.
* getCascadeTransformer function (Transformer): Transformer.
* getDeflateTransformer function (Transformer): Transformer.
* getFormatID function (ISignatureCodec): The ISignatureCodec Interface.
* getInstance function (CipherFactory):  The CipherFactory Class.
* getInstance function (HashFactory):    The HashFactory Class.
* getInstance function (MacFactory):     The MacFactory Class.
* getInstance function (ModeFactory):    The ModeFactory Class.
* getInstance function (PadFactory):     The PadFactory Class.
* getInstance function (PRNGFactory):    The PRNGFactory Class.
* getInstance function (SignatureFactory): The SignatureFactory Class.
* getInstance function (Stage):          Stage.
* getNames function (CipherFactory):     The CipherFactory Class.
* getNames function (HashFactory):       The HashFactory Class.
* getNames function (KeyAgreementFactory): The KeyAgreementFactory class.
* getNames function (MacFactory):        The MacFactory Class.
* getNames function (ModeFactory):       The ModeFactory Class.
* getNames function (PadFactory):        The PadFactory Class.
* getNames function (SignatureFactory):  The SignatureFactory Class.
* getPaddingTransformer function (Transformer): Transformer.
* getPartyAInstance function (KeyAgreementFactory): The KeyAgreementFactory class.
* getPartyBInstance function (KeyAgreementFactory): The KeyAgreementFactory class.
* getSharedSecret function (IKeyAgreementParty): The IKeyAgreementParty Interface.
* gnu.crypto.assembly package:           Cascades and Assemblies.
* gnu.crypto.assembly.Assembly class:    Assembly.
* gnu.crypto.assembly.Cascade class:     Cascade.
* gnu.crypto.assembly.Direction class:   Direction.
* gnu.crypto.assembly.Operation class:   Operation.
* gnu.crypto.assembly.Stage class:       Stage.
* gnu.crypto.assembly.Transformer class: Transformer.
* gnu.crypto.cipher package:             Ciphers.
* gnu.crypto.key package:                Keypairs and Key Agreements.
* gnu.crypto.key.IKeyAgreementParty class: The IKeyAgreementParty Interface.
* gnu.crypto.key.IKeyPairCodec class:    The IKeyPairCodec Interface.
* gnu.crypto.key.IKeyPairGenerator class: The IKeyPairGenerator Interface.
* gnu.crypto.key.KeyAgreementFactory class: The KeyAgreementFactory class.
* gnu.crypto.key.KeyPairGeneratorFactory class: The KeyPairGeneratorFactory Class.
* gnu.crypto.mode package:               Modes.
* gnu.crypto.pad package:                Padding.
* gnu.crypto.prng package:               Random Numbers.
* gnu.crypto.sig package:                Signatures.
* GPL, GNU General Public License <1>:   GNU General Public License.
* GPL, GNU General Public License:       Copying GNU Crypto.
* Hall, Chris:                           Ciphers.
* Handbook of Applied Cryptography:      Introduction.
* hash-based PRNG:                       Random Numbers.
* HashFactory class:                     The HashFactory Class.
* hashSize function (IMessageDigest):    The IMessageDigest Interface.
* IBlockCipher interface:                The IBlockCipher Interface.
* ICM PRNG:                              Random Numbers.
* ICM, integer counter mode:             Modes.
* identity cipher:                       Ciphers.
* IMessageDigest interface:              The IMessageDigest Interface.
* IMode interface:                       The IMode Interface.
* init function (Assembly):              Assembly.
* init function (Cascade):               Cascade.
* init function (IBlockCipher):          The IBlockCipher Interface.
* init function (IKeyAgreementParty):    The IKeyAgreementParty Interface.
* init function (IMac):                  The IMac Interface.
* init function (IPad):                  The IPad Interface.
* init function (Stage):                 Stage.
* init function (Transformer):           Transformer.
* insert function (Cascade):             Cascade.
* introduction:                          Introduction.
* IPad interface:                        The IPad Interface.
* isComplete function (IKeyAgreementParty): The IKeyAgreementParty Interface.
* ISignatureCodec interface:             The ISignatureCodec Interface.
* isPostProcessing function (Transformer): Transformer.
* isPreProcessing function (Transformer): Transformer.
* IV variable (IMode):                   The IMode Interface.
* Kaliski, Burton:                       Message Digests.
* Kelsey, John:                          Ciphers.
* KEY_MATERIAL variable (IBlockCipher):  The IBlockCipher Interface.
* keySizes function (IBlockCipher):      The IBlockCipher Interface.
* KEYSTREAM variable (TMMH16):           TMMH/16.
* Khazad cipher:                         Ciphers.
* Kmett, Edward:                         Acknowledgements.
* Knudsen, Lars:                         Ciphers.
* Koch, Werner:                          Acknowledgements.
* lastUpdate function (Assembly):        Assembly.
* lastUpdate function (Transformer):     Transformer.
* Louchart-Flecher, Olivier:             Acknowledgements.
* MAC example:                           MAC Example.
* MAC_KEY_MATERIAL variable (IMac):      The IMac Interface.
* macSize function (IMac):               The IMac Interface.
* Marshall, Casey:                       Acknowledgements.
* MD2 hash:                              Message Digests.
* MD4 hash:                              Message Digests.
* MD5 hash:                              Message Digests.
* Menezes, Alfred J.:                    Introduction.
* MODE_BLOCK_SIZE variable (IMode):      The IMode Interface.
* ModeFactory class <1>:                 The MacFactory Class.
* ModeFactory class:                     The ModeFactory Class.
* modes:                                 Modes.
* MODULUS_LENGTH variable (DSSKeyPairGenerator): Algorithm-Specific Attributes.
* MODULUS_LENGTH variable (RSAPSSKeyPairGenerator): Algorithm-Specific Attributes.
* MODULUS_LENGTH variable (SRPKeyPairGenerator): Algorithm-Specific Attributes.
* Naffah, Raif:                          Acknowledgements.
* name function (IBlockCipher):          The IBlockCipher Interface.
* name function (IKeyAgreementParty):    The IKeyAgreementParty Interface.
* name function (IKeyPairFactory):       The IKeyPairGenerator Interface.
* name function (IMac):                  The IMac Interface.
* name function (IMessageDigest):        The IMessageDigest Interface.
* name function (IPad):                  The IPad Interface.
* name function (ISignature):            The ISignature Interface.
* names function (PRNGFactory):          The PRNGFactory Class.
* National Institute for Standards and Technology (NIST) <1>: Message Digests.
* National Institute for Standards and Technology (NIST): Ciphers.
* New European Schemes for Signatures, Integrity, and Encryption (NESSIE): Ciphers.
* NONCE_MATERIAL variable (UMac32).:     UMAC-32.
* OFB, output feedback mode:             Modes.
* Operation:                             Assemblies.
* Osvik, Dag Arne:                       Acknowledgements.
* pad function (IPad):                   The IPad Interface.
* padding:                               Padding.
* padding schemes:                       Padding.
* PadFactory class:                      The PadFactory Class.
* PKCS #7 padding:                       Padding.
* PREFIX variable (TMMH16):              TMMH/16.
* Preneel, Bart:                         Message Digests.
* prepend function (Cascade):            Cascade.
* PRIME_SIZE variable (GnuDHKeyPairGenerator): Algorithm-Specific Attributes.
* processMessage function (IKeyAgreementParty): The IKeyAgreementParty Interface.
* Protocols:                             Key Agreements.
* Random Numbers:                        Random Numbers.
* RAW_FORMAT variable (ISignatureCodec): The ISignatureCodec Interface.
* RC4:                                   Random Numbers.
* reset function (Assembly):             Assembly.
* reset function (Cascade):              Cascade.
* reset function (IBlockCipher):         The IBlockCipher Interface.
* reset function (IKeyAgreementParty):   The IKeyAgreementParty Interface.
* reset function (IMac):                 The IMac Interface.
* reset function (IMessageDigest):       The IMessageDigest Interface.
* reset function (IPad):                 The IPad Interface.
* reset function (Stage):                Stage.
* reset function (Transformer):          Transformer.
* reverse function (Direction):          Direction.
* RFC-2631, Ephemeral-Static Mode:       Protocols.
* RFC-2631, Static-Static Mode:          Protocols.
* Rijmen, Vincent <1>:                   Message Digests.
* Rijmen, Vincent:                       Ciphers.
* Rijndael cipher:                       Ciphers.
* RIPEMD hash:                           Message Digests.
* Rivest, Ron <1>:                       Signatures.
* Rivest, Ron <2>:                       Keypairs and Key Agreements.
* Rivest, Ron:                           Message Digests.
* Rogaway, Phillip:                      Signatures.
* RSA algorithm:                         Keypairs and Key Agreements.
* RSA-PSS signature:                     Signatures.
* RSA_PARAMETERS variable (RSAPSSKeyPairGenerator): Algorithm-Specific Attributes.
* SASL-SRP, key agreement:               Protocols.
* Schneier, Bruce <1>:                   Ciphers.
* Schneier, Bruce:                       Introduction.
* Secure Hash Algorithm:                 Message Digests.
* Secure Remote Password algorithm:      Keypairs and Key Agreements.
* Selensminde, Gisle:                    Acknowledgements.
* selfTest function (Cascade):           Cascade.
* selfTest function (IBlockCipher):      The IBlockCipher Interface.
* selfTest function (IMac):              The IMac Interface.
* selfTest function (IMessageDigest):    The IMessageDigest Interface.
* selfTest function (IPad):              The IPad Interface.
* selfTest function (Stage):             Stage.
* Serpent cipher:                        Ciphers.
* setMode function (Transformer):        Transformer.
* setup function (IKeyPairFactory):      The IKeyPairGenerator Interface.
* setupSign function (ISignature):       The ISignature Interface.
* setupVerify function (ISignature):     The ISignature Interface.
* Shamir, Adi <1>:                       Signatures.
* Shamir, Adi:                           Keypairs and Key Agreements.
* SHARED_MODULUS variable (SRPKeyPairGenerator): Algorithm-Specific Attributes.
* sign function (ISignature):            The ISignature Interface.
* signatures:                            Signatures.
* SIGNER_KEY variable (ISignature):      The ISignature Interface.
* size function (Cascade):               Cascade.
* SOURCE_OF_RANDOMNESS variable (DSSKeyPairGenerator): Algorithm-Specific Attributes.
* SOURCE_OF_RANDOMNESS variable (GnuDHKeyPairGenerator): Algorithm-Specific Attributes.
* SOURCE_OF_RANDOMNESS variable (ISignature): The ISignature Interface.
* SOURCE_OF_RANDOMNESS variable (RSAPSSKeyPairGenerator): Algorithm-Specific Attributes.
* SOURCE_OF_RANDOMNESS variable (SRPKeyPairGenerator): Algorithm-Specific Attributes.
* Square cipher:                         Ciphers.
* SRP:                                   Keypairs and Key Agreements.
* SRP-6, key agreement:                  Protocols.
* SRP-6, SASL:                           Protocols.
* Stage:                                 Cascades.
* stages function (Cascade):             Cascade.
* STATE variable (IMode):                The IMode Interface.
* TAG_LENGTH variable (TMMH16):          TMMH/16.
* TBC, trailing bit complement padding:  Padding.
* The IKeyAgreementParty Interface:      Key Agreements.
* The IKeyPairCodec Interface:           Keypairs.
* The IKeyPairGenerator Interface:       Keypairs.
* The KeyAgreementFactory class:         Key Agreements.
* The KeyPairGeneratorFactory Class:     Keypairs.
* Tiger hash:                            Message Digests.
* Transformer:                           Assemblies.
* Triple-DES cipher:                     Ciphers.
* TRUNCATED_SIZE variable (IMac):        The IMac Interface.
* Twofish cipher:                        Ciphers.
* UMAC-KDF:                              Random Numbers.
* unpad function (IPad):                 The IPad Interface.
* update function (Assembly):            Assembly.
* update function (Cascade):             Cascade.
* update function (IMac):                The IMac Interface.
* update function (IMessageDigest):      The IMessageDigest Interface.
* update function (IMode):               The IMode Interface.
* update function (ISignature):          The ISignature Interface.
* update function (Stage):               Stage.
* update function (Transformer):         Transformer.
* USE_DEFAULTS variable (DSSKeyPairGenerator): Algorithm-Specific Attributes.
* USE_DEFAULTS variable (SRPKeyPairGenerator): Algorithm-Specific Attributes.
* Van Oorschot, Paul C.:                 Introduction.
* Vanstone, Scott A.:                    Introduction.
* VERIFIER_KEY variable (ISignature):    The ISignature Interface.
* verify function (ISignature):          The ISignature Interface.
* Wagner, David:                         Ciphers.
* Whirlpool hash:                        Message Digests.
* Whiting, Doug:                         Ciphers.
* Wielaard, Mark:                        Acknowledgements.
* Wu, Thomas:                            Acknowledgements.
* Wu, Thomas J.:                         Keypairs and Key Agreements.


File: gnu-crypto.info,  Node: References,  Prev: Index,  Up: Top

References
**********

[Kal92]
     Burton Kaliski, The MD2 Message-Digest Algorithm, RFC 1319.

     See <http://www.ietf.org/rfc/rfc1319.txt>.


[Kro00]
     Ted Krovetz, John Black, Shai Halevi, Alejandro Hevia, Hugo
     Krawczyk, and Phillip Rogaway, UMAC: Message Authentication Code
     using Universal Hashing, Internet-Draft, October 2000.

     See
     <http://www.cs.ucdavis.edu/~rogaway/umac/draft-krovetz-umac-01.txt>.


[McG02]
     David A. McGrew, The Truncated Multi-Modular Hash Function (TMMH),
     Version Two, Internet-Draft, October 2002.

     See
     <http://www.ietf.org/internet-drafts/draft-irtf-cfrg-tmmh-00.txt>.


[MOV96]
     Alfred J. Menezes, Paul C. Van Oorschot, Scott A. Vanstone
     (Editor); Handbook of Applied Cryptography (1992 CRC Press); ISBN
     0849385237.


[NIST95]
     Federal Information Processing Standards Publication 180-1: Secure
     Hash Standard. 17 April 1995, National Institute for Standards and
     Technology.

     See <http://www.itl.nist.gov/fipspubs/fip180-1.htm>.


[NIST01]
     Federal Information Processing Standards Publication 197: Advanced
     Encryption Standard (AES). 26 November 2001, National Institute for
     Standards and Technology.

     See <http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf>.


[RFC2631]
     Eric Rescorla. Diffie-Hellman Key Agreement Method.

     See <http://www.ietf.org/rfc/rfc2631.txt>.


[Riv92a]
     Ron Rivest, The MD4 Message-Digest Algorithm, RFC 1320.

     See <http://www.ietf.org/rfc/rfc1320.txt>.


[Riv92b]
     Ron Rivest, The MD5 Message-Digest Algorithm, RFC 1321.

     See <http://www.ietf.org/rfc/rfc1321.txt>.


[Sch95]
     Bruce Schneier, Applied Cryptography: Protocols, Algorithms, and
     Source Code in C, Second Edition (1995 John Wiley & Sons); ISBN
     0471117099.


[Wu02]
     Thomas J. Wu, SRP-6: Improvements and Refinements to the Secure
     Remote Password Protocol (29 October 2002).

     See <http://srp.stanford.edu/srp6.ps>.



